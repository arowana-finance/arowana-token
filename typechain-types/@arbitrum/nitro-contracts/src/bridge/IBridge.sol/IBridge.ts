/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common.js";

export interface IBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeOutbox"
      | "allowedDelayedInboxList"
      | "allowedDelayedInboxes"
      | "allowedOutboxList"
      | "allowedOutboxes"
      | "delayedInboxAccs"
      | "delayedMessageCount"
      | "enqueueSequencerMessage"
      | "executeCall"
      | "rollup"
      | "sequencerInbox"
      | "sequencerInboxAccs"
      | "sequencerMessageCount"
      | "sequencerReportedSubMessageCount"
      | "setDelayedInbox"
      | "setOutbox"
      | "setSequencerInbox"
      | "submitBatchSpendingReport"
      | "updateRollupAddress",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeCallTriggered"
      | "InboxToggle"
      | "MessageDelivered"
      | "OutboxToggle"
      | "RollupUpdated"
      | "SequencerInboxUpdated",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activeOutbox",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "allowedDelayedInboxList",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "allowedDelayedInboxes",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "allowedOutboxList",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "allowedOutboxes",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "delayedInboxAccs",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "delayedMessageCount",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "enqueueSequencerMessage",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "executeCall",
    values: [AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "rollup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sequencerInbox",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "sequencerInboxAccs",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "sequencerMessageCount",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "sequencerReportedSubMessageCount",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayedInbox",
    values: [AddressLike, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: "setOutbox",
    values: [AddressLike, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: "setSequencerInbox",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "submitBatchSpendingReport",
    values: [AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "updateRollupAddress",
    values: [AddressLike],
  ): string;

  decodeFunctionResult(
    functionFragment: "activeOutbox",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedDelayedInboxList",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedDelayedInboxes",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedOutboxList",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedOutboxes",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedInboxAccs",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedMessageCount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "enqueueSequencerMessage",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCall",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "rollup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sequencerInbox",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequencerInboxAccs",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequencerMessageCount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequencerReportedSubMessageCount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayedInbox",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "setOutbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSequencerInbox",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitBatchSpendingReport",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRollupAddress",
    data: BytesLike,
  ): Result;
}

export namespace BridgeCallTriggeredEvent {
  export type InputTuple = [
    outbox: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike,
  ];
  export type OutputTuple = [
    outbox: string,
    to: string,
    value: bigint,
    data: string,
  ];
  export interface OutputObject {
    outbox: string;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InboxToggleEvent {
  export type InputTuple = [inbox: AddressLike, enabled: boolean];
  export type OutputTuple = [inbox: string, enabled: boolean];
  export interface OutputObject {
    inbox: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageDeliveredEvent {
  export type InputTuple = [
    messageIndex: BigNumberish,
    beforeInboxAcc: BytesLike,
    inbox: AddressLike,
    kind: BigNumberish,
    sender: AddressLike,
    messageDataHash: BytesLike,
    baseFeeL1: BigNumberish,
    timestamp: BigNumberish,
  ];
  export type OutputTuple = [
    messageIndex: bigint,
    beforeInboxAcc: string,
    inbox: string,
    kind: bigint,
    sender: string,
    messageDataHash: string,
    baseFeeL1: bigint,
    timestamp: bigint,
  ];
  export interface OutputObject {
    messageIndex: bigint;
    beforeInboxAcc: string;
    inbox: string;
    kind: bigint;
    sender: string;
    messageDataHash: string;
    baseFeeL1: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboxToggleEvent {
  export type InputTuple = [outbox: AddressLike, enabled: boolean];
  export type OutputTuple = [outbox: string, enabled: boolean];
  export interface OutputObject {
    outbox: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollupUpdatedEvent {
  export type InputTuple = [rollup: AddressLike];
  export type OutputTuple = [rollup: string];
  export interface OutputObject {
    rollup: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SequencerInboxUpdatedEvent {
  export type InputTuple = [newSequencerInbox: AddressLike];
  export type OutputTuple = [newSequencerInbox: string];
  export interface OutputObject {
    newSequencerInbox: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBridge extends BaseContract {
  connect(runner?: ContractRunner | null): IBridge;
  waitForDeployment(): Promise<this>;

  interface: IBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  activeOutbox: TypedContractMethod<[], [string], "view">;

  allowedDelayedInboxList: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "nonpayable"
  >;

  allowedDelayedInboxes: TypedContractMethod<
    [inbox: AddressLike],
    [boolean],
    "view"
  >;

  allowedOutboxList: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "nonpayable"
  >;

  allowedOutboxes: TypedContractMethod<
    [outbox: AddressLike],
    [boolean],
    "view"
  >;

  delayedInboxAccs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  delayedMessageCount: TypedContractMethod<[], [bigint], "view">;

  enqueueSequencerMessage: TypedContractMethod<
    [
      dataHash: BytesLike,
      afterDelayedMessagesRead: BigNumberish,
      prevMessageCount: BigNumberish,
      newMessageCount: BigNumberish,
    ],
    [
      [bigint, string, string, string] & {
        seqMessageIndex: bigint;
        beforeAcc: string;
        delayedAcc: string;
        acc: string;
      },
    ],
    "nonpayable"
  >;

  executeCall: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;

  rollup: TypedContractMethod<[], [string], "view">;

  sequencerInbox: TypedContractMethod<[], [string], "view">;

  sequencerInboxAccs: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  sequencerMessageCount: TypedContractMethod<[], [bigint], "view">;

  sequencerReportedSubMessageCount: TypedContractMethod<[], [bigint], "view">;

  setDelayedInbox: TypedContractMethod<
    [inbox: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  setOutbox: TypedContractMethod<
    [inbox: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  setSequencerInbox: TypedContractMethod<
    [_sequencerInbox: AddressLike],
    [void],
    "nonpayable"
  >;

  submitBatchSpendingReport: TypedContractMethod<
    [batchPoster: AddressLike, dataHash: BytesLike],
    [bigint],
    "nonpayable"
  >;

  updateRollupAddress: TypedContractMethod<
    [_rollup: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "activeOutbox",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowedDelayedInboxList",
  ): TypedContractMethod<[arg0: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "allowedDelayedInboxes",
  ): TypedContractMethod<[inbox: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "allowedOutboxList",
  ): TypedContractMethod<[arg0: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "allowedOutboxes",
  ): TypedContractMethod<[outbox: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "delayedInboxAccs",
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "delayedMessageCount",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "enqueueSequencerMessage",
  ): TypedContractMethod<
    [
      dataHash: BytesLike,
      afterDelayedMessagesRead: BigNumberish,
      prevMessageCount: BigNumberish,
      newMessageCount: BigNumberish,
    ],
    [
      [bigint, string, string, string] & {
        seqMessageIndex: bigint;
        beforeAcc: string;
        delayedAcc: string;
        acc: string;
      },
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeCall",
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rollup",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sequencerInbox",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sequencerInboxAccs",
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "sequencerMessageCount",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sequencerReportedSubMessageCount",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setDelayedInbox",
  ): TypedContractMethod<
    [inbox: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOutbox",
  ): TypedContractMethod<
    [inbox: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSequencerInbox",
  ): TypedContractMethod<[_sequencerInbox: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitBatchSpendingReport",
  ): TypedContractMethod<
    [batchPoster: AddressLike, dataHash: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRollupAddress",
  ): TypedContractMethod<[_rollup: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BridgeCallTriggered",
  ): TypedContractEvent<
    BridgeCallTriggeredEvent.InputTuple,
    BridgeCallTriggeredEvent.OutputTuple,
    BridgeCallTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "InboxToggle",
  ): TypedContractEvent<
    InboxToggleEvent.InputTuple,
    InboxToggleEvent.OutputTuple,
    InboxToggleEvent.OutputObject
  >;
  getEvent(
    key: "MessageDelivered",
  ): TypedContractEvent<
    MessageDeliveredEvent.InputTuple,
    MessageDeliveredEvent.OutputTuple,
    MessageDeliveredEvent.OutputObject
  >;
  getEvent(
    key: "OutboxToggle",
  ): TypedContractEvent<
    OutboxToggleEvent.InputTuple,
    OutboxToggleEvent.OutputTuple,
    OutboxToggleEvent.OutputObject
  >;
  getEvent(
    key: "RollupUpdated",
  ): TypedContractEvent<
    RollupUpdatedEvent.InputTuple,
    RollupUpdatedEvent.OutputTuple,
    RollupUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SequencerInboxUpdated",
  ): TypedContractEvent<
    SequencerInboxUpdatedEvent.InputTuple,
    SequencerInboxUpdatedEvent.OutputTuple,
    SequencerInboxUpdatedEvent.OutputObject
  >;

  filters: {
    "BridgeCallTriggered(address,address,uint256,bytes)": TypedContractEvent<
      BridgeCallTriggeredEvent.InputTuple,
      BridgeCallTriggeredEvent.OutputTuple,
      BridgeCallTriggeredEvent.OutputObject
    >;
    BridgeCallTriggered: TypedContractEvent<
      BridgeCallTriggeredEvent.InputTuple,
      BridgeCallTriggeredEvent.OutputTuple,
      BridgeCallTriggeredEvent.OutputObject
    >;

    "InboxToggle(address,bool)": TypedContractEvent<
      InboxToggleEvent.InputTuple,
      InboxToggleEvent.OutputTuple,
      InboxToggleEvent.OutputObject
    >;
    InboxToggle: TypedContractEvent<
      InboxToggleEvent.InputTuple,
      InboxToggleEvent.OutputTuple,
      InboxToggleEvent.OutputObject
    >;

    "MessageDelivered(uint256,bytes32,address,uint8,address,bytes32,uint256,uint64)": TypedContractEvent<
      MessageDeliveredEvent.InputTuple,
      MessageDeliveredEvent.OutputTuple,
      MessageDeliveredEvent.OutputObject
    >;
    MessageDelivered: TypedContractEvent<
      MessageDeliveredEvent.InputTuple,
      MessageDeliveredEvent.OutputTuple,
      MessageDeliveredEvent.OutputObject
    >;

    "OutboxToggle(address,bool)": TypedContractEvent<
      OutboxToggleEvent.InputTuple,
      OutboxToggleEvent.OutputTuple,
      OutboxToggleEvent.OutputObject
    >;
    OutboxToggle: TypedContractEvent<
      OutboxToggleEvent.InputTuple,
      OutboxToggleEvent.OutputTuple,
      OutboxToggleEvent.OutputObject
    >;

    "RollupUpdated(address)": TypedContractEvent<
      RollupUpdatedEvent.InputTuple,
      RollupUpdatedEvent.OutputTuple,
      RollupUpdatedEvent.OutputObject
    >;
    RollupUpdated: TypedContractEvent<
      RollupUpdatedEvent.InputTuple,
      RollupUpdatedEvent.OutputTuple,
      RollupUpdatedEvent.OutputObject
    >;

    "SequencerInboxUpdated(address)": TypedContractEvent<
      SequencerInboxUpdatedEvent.InputTuple,
      SequencerInboxUpdatedEvent.OutputTuple,
      SequencerInboxUpdatedEvent.OutputObject
    >;
    SequencerInboxUpdated: TypedContractEvent<
      SequencerInboxUpdatedEvent.InputTuple,
      SequencerInboxUpdatedEvent.OutputTuple,
      SequencerInboxUpdatedEvent.OutputObject
    >;
  };
}
