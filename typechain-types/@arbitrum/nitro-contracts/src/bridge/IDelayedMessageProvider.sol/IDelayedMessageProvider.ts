/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../../common.js";

export interface IDelayedMessageProviderInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "InboxMessageDelivered"
      | "InboxMessageDeliveredFromOrigin",
  ): EventFragment;
}

export namespace InboxMessageDeliveredEvent {
  export type InputTuple = [messageNum: BigNumberish, data: BytesLike];
  export type OutputTuple = [messageNum: bigint, data: string];
  export interface OutputObject {
    messageNum: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InboxMessageDeliveredFromOriginEvent {
  export type InputTuple = [messageNum: BigNumberish];
  export type OutputTuple = [messageNum: bigint];
  export interface OutputObject {
    messageNum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDelayedMessageProvider extends BaseContract {
  connect(runner?: ContractRunner | null): IDelayedMessageProvider;
  waitForDeployment(): Promise<this>;

  interface: IDelayedMessageProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getEvent(
    key: "InboxMessageDelivered",
  ): TypedContractEvent<
    InboxMessageDeliveredEvent.InputTuple,
    InboxMessageDeliveredEvent.OutputTuple,
    InboxMessageDeliveredEvent.OutputObject
  >;
  getEvent(
    key: "InboxMessageDeliveredFromOrigin",
  ): TypedContractEvent<
    InboxMessageDeliveredFromOriginEvent.InputTuple,
    InboxMessageDeliveredFromOriginEvent.OutputTuple,
    InboxMessageDeliveredFromOriginEvent.OutputObject
  >;

  filters: {
    "InboxMessageDelivered(uint256,bytes)": TypedContractEvent<
      InboxMessageDeliveredEvent.InputTuple,
      InboxMessageDeliveredEvent.OutputTuple,
      InboxMessageDeliveredEvent.OutputObject
    >;
    InboxMessageDelivered: TypedContractEvent<
      InboxMessageDeliveredEvent.InputTuple,
      InboxMessageDeliveredEvent.OutputTuple,
      InboxMessageDeliveredEvent.OutputObject
    >;

    "InboxMessageDeliveredFromOrigin(uint256)": TypedContractEvent<
      InboxMessageDeliveredFromOriginEvent.InputTuple,
      InboxMessageDeliveredFromOriginEvent.OutputTuple,
      InboxMessageDeliveredFromOriginEvent.OutputObject
    >;
    InboxMessageDeliveredFromOrigin: TypedContractEvent<
      InboxMessageDeliveredFromOriginEvent.InputTuple,
      InboxMessageDeliveredFromOriginEvent.OutputTuple,
      InboxMessageDeliveredFromOriginEvent.OutputObject
    >;
  };
}
