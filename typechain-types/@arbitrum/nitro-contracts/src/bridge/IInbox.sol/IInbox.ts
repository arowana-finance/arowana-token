/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common.js";

export interface IInboxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowListEnabled"
      | "bridge"
      | "calculateRetryableSubmissionFee"
      | "createRetryableTicket"
      | "depositEth"
      | "getProxyAdmin"
      | "initialize"
      | "isAllowed"
      | "maxDataSize"
      | "pause"
      | "postUpgradeInit"
      | "sendContractTransaction"
      | "sendL1FundedContractTransaction"
      | "sendL1FundedUnsignedTransaction"
      | "sendL1FundedUnsignedTransactionToFork"
      | "sendL2Message"
      | "sendL2MessageFromOrigin"
      | "sendUnsignedTransaction"
      | "sendUnsignedTransactionToFork"
      | "sendWithdrawEthToFork"
      | "sequencerInbox"
      | "setAllowList"
      | "setAllowListEnabled"
      | "unpause"
      | "unsafeCreateRetryableTicket",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "InboxMessageDelivered"
      | "InboxMessageDeliveredFromOrigin",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowListEnabled",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateRetryableSubmissionFee",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "createRetryableTicket",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyAdmin",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "maxDataSize",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postUpgradeInit",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "sendContractTransaction",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "sendL1FundedContractTransaction",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "sendL1FundedUnsignedTransaction",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "sendL1FundedUnsignedTransactionToFork",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "sendL2Message",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "sendL2MessageFromOrigin",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "sendUnsignedTransaction",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "sendUnsignedTransactionToFork",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "sendWithdrawEthToFork",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "sequencerInbox",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowList",
    values: [AddressLike[], boolean[]],
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowListEnabled",
    values: [boolean],
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unsafeCreateRetryableTicket",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: "allowListEnabled",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRetryableSubmissionFee",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRetryableTicket",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProxyAdmin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxDataSize",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postUpgradeInit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendContractTransaction",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL1FundedContractTransaction",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL1FundedUnsignedTransaction",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL1FundedUnsignedTransactionToFork",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL2Message",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL2MessageFromOrigin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendUnsignedTransaction",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendUnsignedTransactionToFork",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendWithdrawEthToFork",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequencerInbox",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowList",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowListEnabled",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsafeCreateRetryableTicket",
    data: BytesLike,
  ): Result;
}

export namespace InboxMessageDeliveredEvent {
  export type InputTuple = [messageNum: BigNumberish, data: BytesLike];
  export type OutputTuple = [messageNum: bigint, data: string];
  export interface OutputObject {
    messageNum: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InboxMessageDeliveredFromOriginEvent {
  export type InputTuple = [messageNum: BigNumberish];
  export type OutputTuple = [messageNum: bigint];
  export interface OutputObject {
    messageNum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IInbox extends BaseContract {
  connect(runner?: ContractRunner | null): IInbox;
  waitForDeployment(): Promise<this>;

  interface: IInboxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  allowListEnabled: TypedContractMethod<[], [boolean], "view">;

  bridge: TypedContractMethod<[], [string], "view">;

  calculateRetryableSubmissionFee: TypedContractMethod<
    [dataLength: BigNumberish, baseFee: BigNumberish],
    [bigint],
    "view"
  >;

  createRetryableTicket: TypedContractMethod<
    [
      to: AddressLike,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: AddressLike,
      callValueRefundAddress: AddressLike,
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      data: BytesLike,
    ],
    [bigint],
    "payable"
  >;

  depositEth: TypedContractMethod<[], [bigint], "payable">;

  getProxyAdmin: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_bridge: AddressLike, _sequencerInbox: AddressLike],
    [void],
    "nonpayable"
  >;

  isAllowed: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  maxDataSize: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  postUpgradeInit: TypedContractMethod<
    [_bridge: AddressLike],
    [void],
    "nonpayable"
  >;

  sendContractTransaction: TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;

  sendL1FundedContractTransaction: TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      to: AddressLike,
      data: BytesLike,
    ],
    [bigint],
    "payable"
  >;

  sendL1FundedUnsignedTransaction: TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      nonce: BigNumberish,
      to: AddressLike,
      data: BytesLike,
    ],
    [bigint],
    "payable"
  >;

  sendL1FundedUnsignedTransactionToFork: TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      nonce: BigNumberish,
      to: AddressLike,
      data: BytesLike,
    ],
    [bigint],
    "payable"
  >;

  sendL2Message: TypedContractMethod<
    [messageData: BytesLike],
    [bigint],
    "nonpayable"
  >;

  sendL2MessageFromOrigin: TypedContractMethod<
    [messageData: BytesLike],
    [bigint],
    "nonpayable"
  >;

  sendUnsignedTransaction: TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      nonce: BigNumberish,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;

  sendUnsignedTransactionToFork: TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      nonce: BigNumberish,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;

  sendWithdrawEthToFork: TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      nonce: BigNumberish,
      value: BigNumberish,
      withdrawTo: AddressLike,
    ],
    [bigint],
    "nonpayable"
  >;

  sequencerInbox: TypedContractMethod<[], [string], "view">;

  setAllowList: TypedContractMethod<
    [user: AddressLike[], val: boolean[]],
    [void],
    "nonpayable"
  >;

  setAllowListEnabled: TypedContractMethod<
    [_allowListEnabled: boolean],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unsafeCreateRetryableTicket: TypedContractMethod<
    [
      to: AddressLike,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: AddressLike,
      callValueRefundAddress: AddressLike,
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      data: BytesLike,
    ],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "allowListEnabled",
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "bridge",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateRetryableSubmissionFee",
  ): TypedContractMethod<
    [dataLength: BigNumberish, baseFee: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createRetryableTicket",
  ): TypedContractMethod<
    [
      to: AddressLike,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: AddressLike,
      callValueRefundAddress: AddressLike,
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      data: BytesLike,
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositEth",
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "getProxyAdmin",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize",
  ): TypedContractMethod<
    [_bridge: AddressLike, _sequencerInbox: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAllowed",
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxDataSize",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "postUpgradeInit",
  ): TypedContractMethod<[_bridge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendContractTransaction",
  ): TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendL1FundedContractTransaction",
  ): TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      to: AddressLike,
      data: BytesLike,
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendL1FundedUnsignedTransaction",
  ): TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      nonce: BigNumberish,
      to: AddressLike,
      data: BytesLike,
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendL1FundedUnsignedTransactionToFork",
  ): TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      nonce: BigNumberish,
      to: AddressLike,
      data: BytesLike,
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendL2Message",
  ): TypedContractMethod<[messageData: BytesLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "sendL2MessageFromOrigin",
  ): TypedContractMethod<[messageData: BytesLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "sendUnsignedTransaction",
  ): TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      nonce: BigNumberish,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendUnsignedTransactionToFork",
  ): TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      nonce: BigNumberish,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendWithdrawEthToFork",
  ): TypedContractMethod<
    [
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      nonce: BigNumberish,
      value: BigNumberish,
      withdrawTo: AddressLike,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sequencerInbox",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAllowList",
  ): TypedContractMethod<
    [user: AddressLike[], val: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowListEnabled",
  ): TypedContractMethod<[_allowListEnabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unsafeCreateRetryableTicket",
  ): TypedContractMethod<
    [
      to: AddressLike,
      l2CallValue: BigNumberish,
      maxSubmissionCost: BigNumberish,
      excessFeeRefundAddress: AddressLike,
      callValueRefundAddress: AddressLike,
      gasLimit: BigNumberish,
      maxFeePerGas: BigNumberish,
      data: BytesLike,
    ],
    [bigint],
    "payable"
  >;

  getEvent(
    key: "InboxMessageDelivered",
  ): TypedContractEvent<
    InboxMessageDeliveredEvent.InputTuple,
    InboxMessageDeliveredEvent.OutputTuple,
    InboxMessageDeliveredEvent.OutputObject
  >;
  getEvent(
    key: "InboxMessageDeliveredFromOrigin",
  ): TypedContractEvent<
    InboxMessageDeliveredFromOriginEvent.InputTuple,
    InboxMessageDeliveredFromOriginEvent.OutputTuple,
    InboxMessageDeliveredFromOriginEvent.OutputObject
  >;

  filters: {
    "InboxMessageDelivered(uint256,bytes)": TypedContractEvent<
      InboxMessageDeliveredEvent.InputTuple,
      InboxMessageDeliveredEvent.OutputTuple,
      InboxMessageDeliveredEvent.OutputObject
    >;
    InboxMessageDelivered: TypedContractEvent<
      InboxMessageDeliveredEvent.InputTuple,
      InboxMessageDeliveredEvent.OutputTuple,
      InboxMessageDeliveredEvent.OutputObject
    >;

    "InboxMessageDeliveredFromOrigin(uint256)": TypedContractEvent<
      InboxMessageDeliveredFromOriginEvent.InputTuple,
      InboxMessageDeliveredFromOriginEvent.OutputTuple,
      InboxMessageDeliveredFromOriginEvent.OutputObject
    >;
    InboxMessageDeliveredFromOrigin: TypedContractEvent<
      InboxMessageDeliveredFromOriginEvent.InputTuple,
      InboxMessageDeliveredFromOriginEvent.OutputTuple,
      InboxMessageDeliveredFromOriginEvent.OutputObject
    >;
  };
}
