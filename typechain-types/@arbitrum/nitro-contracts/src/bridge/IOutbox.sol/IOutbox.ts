/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common.js";

export interface IOutboxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "OUTBOX_VERSION"
      | "bridge"
      | "calculateItemHash"
      | "calculateMerkleRoot"
      | "executeTransaction"
      | "executeTransactionSimulation"
      | "initialize"
      | "isSpent"
      | "l2ToL1Block"
      | "l2ToL1EthBlock"
      | "l2ToL1OutputId"
      | "l2ToL1Sender"
      | "l2ToL1Timestamp"
      | "postUpgradeInit"
      | "rollup"
      | "roots"
      | "spent"
      | "updateRollupAddress"
      | "updateSendRoot",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OutBoxTransactionExecuted" | "SendRootUpdated",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "OUTBOX_VERSION",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateItemHash",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMerkleRoot",
    values: [BytesLike[], BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [
      BytesLike[],
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransactionSimulation",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "isSpent",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "l2ToL1Block",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "l2ToL1EthBlock",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "l2ToL1OutputId",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "l2ToL1Sender",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "l2ToL1Timestamp",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "postUpgradeInit",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "rollup", values?: undefined): string;
  encodeFunctionData(functionFragment: "roots", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "spent", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "updateRollupAddress",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "updateSendRoot",
    values: [BytesLike, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: "OUTBOX_VERSION",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateItemHash",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMerkleRoot",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransactionSimulation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSpent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2ToL1Block",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2ToL1EthBlock",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2ToL1OutputId",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2ToL1Sender",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2ToL1Timestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "postUpgradeInit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "rollup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRollupAddress",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSendRoot",
    data: BytesLike,
  ): Result;
}

export namespace OutBoxTransactionExecutedEvent {
  export type InputTuple = [
    to: AddressLike,
    l2Sender: AddressLike,
    zero: BigNumberish,
    transactionIndex: BigNumberish,
  ];
  export type OutputTuple = [
    to: string,
    l2Sender: string,
    zero: bigint,
    transactionIndex: bigint,
  ];
  export interface OutputObject {
    to: string;
    l2Sender: string;
    zero: bigint;
    transactionIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendRootUpdatedEvent {
  export type InputTuple = [outputRoot: BytesLike, l2BlockHash: BytesLike];
  export type OutputTuple = [outputRoot: string, l2BlockHash: string];
  export interface OutputObject {
    outputRoot: string;
    l2BlockHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOutbox extends BaseContract {
  connect(runner?: ContractRunner | null): IOutbox;
  waitForDeployment(): Promise<this>;

  interface: IOutboxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  OUTBOX_VERSION: TypedContractMethod<[], [bigint], "view">;

  bridge: TypedContractMethod<[], [string], "view">;

  calculateItemHash: TypedContractMethod<
    [
      l2Sender: AddressLike,
      to: AddressLike,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
    ],
    [string],
    "view"
  >;

  calculateMerkleRoot: TypedContractMethod<
    [proof: BytesLike[], path: BigNumberish, item: BytesLike],
    [string],
    "view"
  >;

  executeTransaction: TypedContractMethod<
    [
      proof: BytesLike[],
      index: BigNumberish,
      l2Sender: AddressLike,
      to: AddressLike,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  executeTransactionSimulation: TypedContractMethod<
    [
      index: BigNumberish,
      l2Sender: AddressLike,
      to: AddressLike,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[_bridge: AddressLike], [void], "nonpayable">;

  isSpent: TypedContractMethod<[index: BigNumberish], [boolean], "view">;

  l2ToL1Block: TypedContractMethod<[], [bigint], "view">;

  l2ToL1EthBlock: TypedContractMethod<[], [bigint], "view">;

  l2ToL1OutputId: TypedContractMethod<[], [string], "view">;

  l2ToL1Sender: TypedContractMethod<[], [string], "view">;

  l2ToL1Timestamp: TypedContractMethod<[], [bigint], "view">;

  postUpgradeInit: TypedContractMethod<[], [void], "nonpayable">;

  rollup: TypedContractMethod<[], [string], "view">;

  roots: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  spent: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  updateRollupAddress: TypedContractMethod<[], [void], "nonpayable">;

  updateSendRoot: TypedContractMethod<
    [sendRoot: BytesLike, l2BlockHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "OUTBOX_VERSION",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridge",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateItemHash",
  ): TypedContractMethod<
    [
      l2Sender: AddressLike,
      to: AddressLike,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateMerkleRoot",
  ): TypedContractMethod<
    [proof: BytesLike[], path: BigNumberish, item: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeTransaction",
  ): TypedContractMethod<
    [
      proof: BytesLike[],
      index: BigNumberish,
      l2Sender: AddressLike,
      to: AddressLike,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeTransactionSimulation",
  ): TypedContractMethod<
    [
      index: BigNumberish,
      l2Sender: AddressLike,
      to: AddressLike,
      l2Block: BigNumberish,
      l1Block: BigNumberish,
      l2Timestamp: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize",
  ): TypedContractMethod<[_bridge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isSpent",
  ): TypedContractMethod<[index: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "l2ToL1Block",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "l2ToL1EthBlock",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "l2ToL1OutputId",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "l2ToL1Sender",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "l2ToL1Timestamp",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "postUpgradeInit",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rollup",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "roots",
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "spent",
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "updateRollupAddress",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSendRoot",
  ): TypedContractMethod<
    [sendRoot: BytesLike, l2BlockHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OutBoxTransactionExecuted",
  ): TypedContractEvent<
    OutBoxTransactionExecutedEvent.InputTuple,
    OutBoxTransactionExecutedEvent.OutputTuple,
    OutBoxTransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SendRootUpdated",
  ): TypedContractEvent<
    SendRootUpdatedEvent.InputTuple,
    SendRootUpdatedEvent.OutputTuple,
    SendRootUpdatedEvent.OutputObject
  >;

  filters: {
    "OutBoxTransactionExecuted(address,address,uint256,uint256)": TypedContractEvent<
      OutBoxTransactionExecutedEvent.InputTuple,
      OutBoxTransactionExecutedEvent.OutputTuple,
      OutBoxTransactionExecutedEvent.OutputObject
    >;
    OutBoxTransactionExecuted: TypedContractEvent<
      OutBoxTransactionExecutedEvent.InputTuple,
      OutBoxTransactionExecutedEvent.OutputTuple,
      OutBoxTransactionExecutedEvent.OutputObject
    >;

    "SendRootUpdated(bytes32,bytes32)": TypedContractEvent<
      SendRootUpdatedEvent.InputTuple,
      SendRootUpdatedEvent.OutputTuple,
      SendRootUpdatedEvent.OutputObject
    >;
    SendRootUpdated: TypedContractEvent<
      SendRootUpdatedEvent.InputTuple,
      SendRootUpdatedEvent.OutputTuple,
      SendRootUpdatedEvent.OutputObject
    >;
  };
}
