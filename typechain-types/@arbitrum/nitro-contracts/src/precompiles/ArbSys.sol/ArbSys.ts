/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common.js";

export interface ArbSysInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "arbBlockHash"
      | "arbBlockNumber"
      | "arbChainID"
      | "arbOSVersion"
      | "getStorageGasAvailable"
      | "isTopLevelCall"
      | "mapL1SenderContractAddressToL2Alias"
      | "myCallersAddressWithoutAliasing"
      | "sendMerkleTreeState"
      | "sendTxToL1"
      | "wasMyCallersAddressAliased"
      | "withdrawEth",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "L2ToL1Transaction"
      | "L2ToL1Tx"
      | "SendMerkleUpdate",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "arbBlockHash",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "arbBlockNumber",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "arbChainID",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "arbOSVersion",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getStorageGasAvailable",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "isTopLevelCall",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "mapL1SenderContractAddressToL2Alias",
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "myCallersAddressWithoutAliasing",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "sendMerkleTreeState",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "sendTxToL1",
    values: [AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "wasMyCallersAddressAliased",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEth",
    values: [AddressLike],
  ): string;

  decodeFunctionResult(
    functionFragment: "arbBlockHash",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbBlockNumber",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "arbChainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arbOSVersion",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStorageGasAvailable",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTopLevelCall",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "mapL1SenderContractAddressToL2Alias",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "myCallersAddressWithoutAliasing",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMerkleTreeState",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "sendTxToL1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wasMyCallersAddressAliased",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike,
  ): Result;
}

export namespace L2ToL1TransactionEvent {
  export type InputTuple = [
    caller: AddressLike,
    destination: AddressLike,
    uniqueId: BigNumberish,
    batchNumber: BigNumberish,
    indexInBatch: BigNumberish,
    arbBlockNum: BigNumberish,
    ethBlockNum: BigNumberish,
    timestamp: BigNumberish,
    callvalue: BigNumberish,
    data: BytesLike,
  ];
  export type OutputTuple = [
    caller: string,
    destination: string,
    uniqueId: bigint,
    batchNumber: bigint,
    indexInBatch: bigint,
    arbBlockNum: bigint,
    ethBlockNum: bigint,
    timestamp: bigint,
    callvalue: bigint,
    data: string,
  ];
  export interface OutputObject {
    caller: string;
    destination: string;
    uniqueId: bigint;
    batchNumber: bigint;
    indexInBatch: bigint;
    arbBlockNum: bigint;
    ethBlockNum: bigint;
    timestamp: bigint;
    callvalue: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace L2ToL1TxEvent {
  export type InputTuple = [
    caller: AddressLike,
    destination: AddressLike,
    hash: BigNumberish,
    position: BigNumberish,
    arbBlockNum: BigNumberish,
    ethBlockNum: BigNumberish,
    timestamp: BigNumberish,
    callvalue: BigNumberish,
    data: BytesLike,
  ];
  export type OutputTuple = [
    caller: string,
    destination: string,
    hash: bigint,
    position: bigint,
    arbBlockNum: bigint,
    ethBlockNum: bigint,
    timestamp: bigint,
    callvalue: bigint,
    data: string,
  ];
  export interface OutputObject {
    caller: string;
    destination: string;
    hash: bigint;
    position: bigint;
    arbBlockNum: bigint;
    ethBlockNum: bigint;
    timestamp: bigint;
    callvalue: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendMerkleUpdateEvent {
  export type InputTuple = [
    reserved: BigNumberish,
    hash: BytesLike,
    position: BigNumberish,
  ];
  export type OutputTuple = [reserved: bigint, hash: string, position: bigint];
  export interface OutputObject {
    reserved: bigint;
    hash: string;
    position: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArbSys extends BaseContract {
  connect(runner?: ContractRunner | null): ArbSys;
  waitForDeployment(): Promise<this>;

  interface: ArbSysInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  arbBlockHash: TypedContractMethod<
    [arbBlockNum: BigNumberish],
    [string],
    "view"
  >;

  arbBlockNumber: TypedContractMethod<[], [bigint], "view">;

  arbChainID: TypedContractMethod<[], [bigint], "view">;

  arbOSVersion: TypedContractMethod<[], [bigint], "view">;

  getStorageGasAvailable: TypedContractMethod<[], [bigint], "view">;

  isTopLevelCall: TypedContractMethod<[], [boolean], "view">;

  mapL1SenderContractAddressToL2Alias: TypedContractMethod<
    [sender: AddressLike, unused: AddressLike],
    [string],
    "view"
  >;

  myCallersAddressWithoutAliasing: TypedContractMethod<[], [string], "view">;

  sendMerkleTreeState: TypedContractMethod<
    [],
    [
      [bigint, string, string[]] & {
        size: bigint;
        root: string;
        partials: string[];
      },
    ],
    "view"
  >;

  sendTxToL1: TypedContractMethod<
    [destination: AddressLike, data: BytesLike],
    [bigint],
    "payable"
  >;

  wasMyCallersAddressAliased: TypedContractMethod<[], [boolean], "view">;

  withdrawEth: TypedContractMethod<
    [destination: AddressLike],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "arbBlockHash",
  ): TypedContractMethod<[arbBlockNum: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "arbBlockNumber",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "arbChainID",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "arbOSVersion",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStorageGasAvailable",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isTopLevelCall",
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mapL1SenderContractAddressToL2Alias",
  ): TypedContractMethod<
    [sender: AddressLike, unused: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "myCallersAddressWithoutAliasing",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendMerkleTreeState",
  ): TypedContractMethod<
    [],
    [
      [bigint, string, string[]] & {
        size: bigint;
        root: string;
        partials: string[];
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sendTxToL1",
  ): TypedContractMethod<
    [destination: AddressLike, data: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "wasMyCallersAddressAliased",
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawEth",
  ): TypedContractMethod<[destination: AddressLike], [bigint], "payable">;

  getEvent(
    key: "L2ToL1Transaction",
  ): TypedContractEvent<
    L2ToL1TransactionEvent.InputTuple,
    L2ToL1TransactionEvent.OutputTuple,
    L2ToL1TransactionEvent.OutputObject
  >;
  getEvent(
    key: "L2ToL1Tx",
  ): TypedContractEvent<
    L2ToL1TxEvent.InputTuple,
    L2ToL1TxEvent.OutputTuple,
    L2ToL1TxEvent.OutputObject
  >;
  getEvent(
    key: "SendMerkleUpdate",
  ): TypedContractEvent<
    SendMerkleUpdateEvent.InputTuple,
    SendMerkleUpdateEvent.OutputTuple,
    SendMerkleUpdateEvent.OutputObject
  >;

  filters: {
    "L2ToL1Transaction(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes)": TypedContractEvent<
      L2ToL1TransactionEvent.InputTuple,
      L2ToL1TransactionEvent.OutputTuple,
      L2ToL1TransactionEvent.OutputObject
    >;
    L2ToL1Transaction: TypedContractEvent<
      L2ToL1TransactionEvent.InputTuple,
      L2ToL1TransactionEvent.OutputTuple,
      L2ToL1TransactionEvent.OutputObject
    >;

    "L2ToL1Tx(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes)": TypedContractEvent<
      L2ToL1TxEvent.InputTuple,
      L2ToL1TxEvent.OutputTuple,
      L2ToL1TxEvent.OutputObject
    >;
    L2ToL1Tx: TypedContractEvent<
      L2ToL1TxEvent.InputTuple,
      L2ToL1TxEvent.OutputTuple,
      L2ToL1TxEvent.OutputObject
    >;

    "SendMerkleUpdate(uint256,bytes32,uint256)": TypedContractEvent<
      SendMerkleUpdateEvent.InputTuple,
      SendMerkleUpdateEvent.OutputTuple,
      SendMerkleUpdateEvent.OutputObject
    >;
    SendMerkleUpdate: TypedContractEvent<
      SendMerkleUpdateEvent.InputTuple,
      SendMerkleUpdateEvent.OutputTuple,
      SendMerkleUpdateEvent.OutputObject
    >;
  };
}
