/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export declare namespace ArbGateway {
  export type OtherTokensStruct = { home: AddressLike; other: AddressLike };

  export type OtherTokensStructOutput = [home: string, other: string] & {
    home: string;
    other: string;
  };
}

export interface ArbGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "arbsys"
      | "bridgeFrom"
      | "bridgeMsg"
      | "bridgeTo"
      | "bridgeToPermit"
      | "checkArb"
      | "convertAmount"
      | "inbox"
      | "initializeGateway"
      | "nonce"
      | "otherGateway"
      | "otherTokens"
      | "owner"
      | "renounceOwnership"
      | "setBurnToken"
      | "setOtherToken"
      | "shouldBurnToken"
      | "transferOwnership",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgedCall"
      | "BridgedFrom"
      | "BridgedMessage"
      | "BridgedTo"
      | "Initialized"
      | "InitializedGateway"
      | "OwnershipTransferred"
      | "SetOtherToken"
      | "SetToBurn",
  ): EventFragment;

  encodeFunctionData(functionFragment: "arbsys", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridgeFrom",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeMsg",
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeTo",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeToPermit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "checkArb",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "convertAmount",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "inbox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initializeGateway",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      ArbGateway.OtherTokensStruct[],
    ],
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "otherGateway",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "otherTokens",
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnToken",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setOtherToken",
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "shouldBurnToken",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike],
  ): string;

  decodeFunctionResult(functionFragment: "arbsys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeMsg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeToPermit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "checkArb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertAmount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "inbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeGateway",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "otherGateway",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "otherTokens",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOtherToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldBurnToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
}

export namespace BridgedCallEvent {
  export type InputTuple = [
    nonce: BigNumberish,
    success: boolean,
    returnData: BytesLike,
  ];
  export type OutputTuple = [
    nonce: bigint,
    success: boolean,
    returnData: string,
  ];
  export interface OutputObject {
    nonce: bigint;
    success: boolean;
    returnData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgedFromEvent {
  export type InputTuple = [
    nonce: BigNumberish,
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike,
  ];
  export type OutputTuple = [
    nonce: bigint,
    token: string,
    from: string,
    to: string,
    value: bigint,
    data: string,
  ];
  export interface OutputObject {
    nonce: bigint;
    token: string;
    from: string;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgedMessageEvent {
  export type InputTuple = [nonce: BigNumberish, msg: string];
  export type OutputTuple = [nonce: bigint, msg: string];
  export interface OutputObject {
    nonce: bigint;
    msg: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgedToEvent {
  export type InputTuple = [
    nonce: BigNumberish,
    bridgeID: BigNumberish,
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike,
  ];
  export type OutputTuple = [
    nonce: bigint,
    bridgeID: bigint,
    token: string,
    from: string,
    to: string,
    value: bigint,
    data: string,
  ];
  export interface OutputObject {
    nonce: bigint;
    bridgeID: bigint;
    token: string;
    from: string;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedGatewayEvent {
  export type InputTuple = [
    arbSys: AddressLike,
    inbox: AddressLike,
    otherGateway: AddressLike,
  ];
  export type OutputTuple = [
    arbSys: string,
    inbox: string,
    otherGateway: string,
  ];
  export interface OutputObject {
    arbSys: string;
    inbox: string;
    otherGateway: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOtherTokenEvent {
  export type InputTuple = [home: AddressLike, other: AddressLike];
  export type OutputTuple = [home: string, other: string];
  export interface OutputObject {
    home: string;
    other: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetToBurnEvent {
  export type InputTuple = [token: AddressLike, shouldBurn: boolean];
  export type OutputTuple = [token: string, shouldBurn: boolean];
  export interface OutputObject {
    token: string;
    shouldBurn: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArbGateway extends BaseContract {
  connect(runner?: ContractRunner | null): ArbGateway;
  waitForDeployment(): Promise<this>;

  interface: ArbGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  arbsys: TypedContractMethod<[], [string], "view">;

  bridgeFrom: TypedContractMethod<
    [
      tokenDecimals: BigNumberish,
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      _nonce: BigNumberish,
    ],
    [void],
    "payable"
  >;

  bridgeMsg: TypedContractMethod<
    [_nonce: BigNumberish, _msg: string],
    [void],
    "nonpayable"
  >;

  bridgeTo: TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
    ],
    [bigint],
    "payable"
  >;

  bridgeToPermit: TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
    ],
    [bigint],
    "payable"
  >;

  checkArb: TypedContractMethod<[msgSender: AddressLike], [boolean], "view">;

  convertAmount: TypedContractMethod<
    [
      fromValue: BigNumberish,
      fromDecimals: BigNumberish,
      toDecimals: BigNumberish,
    ],
    [bigint],
    "view"
  >;

  inbox: TypedContractMethod<[], [string], "view">;

  initializeGateway: TypedContractMethod<
    [
      _owner: AddressLike,
      _inbox: AddressLike,
      _otherGateway: AddressLike,
      _otherTokens: ArbGateway.OtherTokensStruct[],
    ],
    [void],
    "nonpayable"
  >;

  nonce: TypedContractMethod<[], [bigint], "view">;

  otherGateway: TypedContractMethod<[], [string], "view">;

  otherTokens: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBurnToken: TypedContractMethod<
    [homeToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setOtherToken: TypedContractMethod<
    [home: AddressLike, other: AddressLike],
    [void],
    "nonpayable"
  >;

  shouldBurnToken: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "arbsys",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridgeFrom",
  ): TypedContractMethod<
    [
      tokenDecimals: BigNumberish,
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      _nonce: BigNumberish,
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bridgeMsg",
  ): TypedContractMethod<
    [_nonce: BigNumberish, _msg: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgeTo",
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bridgeToPermit",
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "checkArb",
  ): TypedContractMethod<[msgSender: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "convertAmount",
  ): TypedContractMethod<
    [
      fromValue: BigNumberish,
      fromDecimals: BigNumberish,
      toDecimals: BigNumberish,
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "inbox",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initializeGateway",
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _inbox: AddressLike,
      _otherGateway: AddressLike,
      _otherTokens: ArbGateway.OtherTokensStruct[],
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonce",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "otherGateway",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "otherTokens",
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBurnToken",
  ): TypedContractMethod<[homeToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOtherToken",
  ): TypedContractMethod<
    [home: AddressLike, other: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shouldBurnToken",
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership",
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BridgedCall",
  ): TypedContractEvent<
    BridgedCallEvent.InputTuple,
    BridgedCallEvent.OutputTuple,
    BridgedCallEvent.OutputObject
  >;
  getEvent(
    key: "BridgedFrom",
  ): TypedContractEvent<
    BridgedFromEvent.InputTuple,
    BridgedFromEvent.OutputTuple,
    BridgedFromEvent.OutputObject
  >;
  getEvent(
    key: "BridgedMessage",
  ): TypedContractEvent<
    BridgedMessageEvent.InputTuple,
    BridgedMessageEvent.OutputTuple,
    BridgedMessageEvent.OutputObject
  >;
  getEvent(
    key: "BridgedTo",
  ): TypedContractEvent<
    BridgedToEvent.InputTuple,
    BridgedToEvent.OutputTuple,
    BridgedToEvent.OutputObject
  >;
  getEvent(
    key: "Initialized",
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "InitializedGateway",
  ): TypedContractEvent<
    InitializedGatewayEvent.InputTuple,
    InitializedGatewayEvent.OutputTuple,
    InitializedGatewayEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetOtherToken",
  ): TypedContractEvent<
    SetOtherTokenEvent.InputTuple,
    SetOtherTokenEvent.OutputTuple,
    SetOtherTokenEvent.OutputObject
  >;
  getEvent(
    key: "SetToBurn",
  ): TypedContractEvent<
    SetToBurnEvent.InputTuple,
    SetToBurnEvent.OutputTuple,
    SetToBurnEvent.OutputObject
  >;

  filters: {
    "BridgedCall(uint256,bool,bytes)": TypedContractEvent<
      BridgedCallEvent.InputTuple,
      BridgedCallEvent.OutputTuple,
      BridgedCallEvent.OutputObject
    >;
    BridgedCall: TypedContractEvent<
      BridgedCallEvent.InputTuple,
      BridgedCallEvent.OutputTuple,
      BridgedCallEvent.OutputObject
    >;

    "BridgedFrom(uint256,address,address,address,uint256,bytes)": TypedContractEvent<
      BridgedFromEvent.InputTuple,
      BridgedFromEvent.OutputTuple,
      BridgedFromEvent.OutputObject
    >;
    BridgedFrom: TypedContractEvent<
      BridgedFromEvent.InputTuple,
      BridgedFromEvent.OutputTuple,
      BridgedFromEvent.OutputObject
    >;

    "BridgedMessage(uint256,string)": TypedContractEvent<
      BridgedMessageEvent.InputTuple,
      BridgedMessageEvent.OutputTuple,
      BridgedMessageEvent.OutputObject
    >;
    BridgedMessage: TypedContractEvent<
      BridgedMessageEvent.InputTuple,
      BridgedMessageEvent.OutputTuple,
      BridgedMessageEvent.OutputObject
    >;

    "BridgedTo(uint256,uint256,address,address,address,uint256,bytes)": TypedContractEvent<
      BridgedToEvent.InputTuple,
      BridgedToEvent.OutputTuple,
      BridgedToEvent.OutputObject
    >;
    BridgedTo: TypedContractEvent<
      BridgedToEvent.InputTuple,
      BridgedToEvent.OutputTuple,
      BridgedToEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "InitializedGateway(address,address,address)": TypedContractEvent<
      InitializedGatewayEvent.InputTuple,
      InitializedGatewayEvent.OutputTuple,
      InitializedGatewayEvent.OutputObject
    >;
    InitializedGateway: TypedContractEvent<
      InitializedGatewayEvent.InputTuple,
      InitializedGatewayEvent.OutputTuple,
      InitializedGatewayEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetOtherToken(address,address)": TypedContractEvent<
      SetOtherTokenEvent.InputTuple,
      SetOtherTokenEvent.OutputTuple,
      SetOtherTokenEvent.OutputObject
    >;
    SetOtherToken: TypedContractEvent<
      SetOtherTokenEvent.InputTuple,
      SetOtherTokenEvent.OutputTuple,
      SetOtherTokenEvent.OutputObject
    >;

    "SetToBurn(address,bool)": TypedContractEvent<
      SetToBurnEvent.InputTuple,
      SetToBurnEvent.OutputTuple,
      SetToBurnEvent.OutputObject
    >;
    SetToBurn: TypedContractEvent<
      SetToBurnEvent.InputTuple,
      SetToBurnEvent.OutputTuple,
      SetToBurnEvent.OutputObject
    >;
  };
}
