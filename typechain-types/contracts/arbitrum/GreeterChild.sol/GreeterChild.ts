/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface GreeterChildInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "greet"
      | "parentTarget"
      | "setGreeting"
      | "setGreetingInParent"
      | "updateParentTarget",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ChildToParentTxCreated" | "NewGreeting",
  ): EventFragment;

  encodeFunctionData(functionFragment: "greet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parentTarget",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "setGreeting", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGreetingInParent",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "updateParentTarget",
    values: [AddressLike],
  ): string;

  decodeFunctionResult(functionFragment: "greet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentTarget",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGreeting",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGreetingInParent",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParentTarget",
    data: BytesLike,
  ): Result;
}

export namespace ChildToParentTxCreatedEvent {
  export type InputTuple = [withdrawalId: BigNumberish];
  export type OutputTuple = [withdrawalId: bigint];
  export interface OutputObject {
    withdrawalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewGreetingEvent {
  export type InputTuple = [greeting: string];
  export type OutputTuple = [greeting: string];
  export interface OutputObject {
    greeting: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GreeterChild extends BaseContract {
  connect(runner?: ContractRunner | null): GreeterChild;
  waitForDeployment(): Promise<this>;

  interface: GreeterChildInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  greet: TypedContractMethod<[], [string], "view">;

  parentTarget: TypedContractMethod<[], [string], "view">;

  setGreeting: TypedContractMethod<[_greeting: string], [void], "nonpayable">;

  setGreetingInParent: TypedContractMethod<
    [_greeting: string],
    [bigint],
    "nonpayable"
  >;

  updateParentTarget: TypedContractMethod<
    [_parentTarget: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "greet",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "parentTarget",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setGreeting",
  ): TypedContractMethod<[_greeting: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGreetingInParent",
  ): TypedContractMethod<[_greeting: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "updateParentTarget",
  ): TypedContractMethod<[_parentTarget: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ChildToParentTxCreated",
  ): TypedContractEvent<
    ChildToParentTxCreatedEvent.InputTuple,
    ChildToParentTxCreatedEvent.OutputTuple,
    ChildToParentTxCreatedEvent.OutputObject
  >;
  getEvent(
    key: "NewGreeting",
  ): TypedContractEvent<
    NewGreetingEvent.InputTuple,
    NewGreetingEvent.OutputTuple,
    NewGreetingEvent.OutputObject
  >;

  filters: {
    "ChildToParentTxCreated(uint256)": TypedContractEvent<
      ChildToParentTxCreatedEvent.InputTuple,
      ChildToParentTxCreatedEvent.OutputTuple,
      ChildToParentTxCreatedEvent.OutputObject
    >;
    ChildToParentTxCreated: TypedContractEvent<
      ChildToParentTxCreatedEvent.InputTuple,
      ChildToParentTxCreatedEvent.OutputTuple,
      ChildToParentTxCreatedEvent.OutputObject
    >;

    "NewGreeting(string)": TypedContractEvent<
      NewGreetingEvent.InputTuple,
      NewGreetingEvent.OutputTuple,
      NewGreetingEvent.OutputObject
    >;
    NewGreeting: TypedContractEvent<
      NewGreetingEvent.InputTuple,
      NewGreetingEvent.OutputTuple,
      NewGreetingEvent.OutputObject
    >;
  };
}
