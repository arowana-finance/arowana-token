/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface IGatewayInterface extends Interface {
  getFunction(
    nameOrSignature: "bridgeFrom" | "bridgeMsg" | "bridgeTo" | "bridgeToPermit",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridgeFrom",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeMsg",
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeTo",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeToPermit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;

  decodeFunctionResult(functionFragment: "bridgeFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeMsg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeToPermit",
    data: BytesLike,
  ): Result;
}

export interface IGateway extends BaseContract {
  connect(runner?: ContractRunner | null): IGateway;
  waitForDeployment(): Promise<this>;

  interface: IGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  bridgeFrom: TypedContractMethod<
    [
      tokenDecimals: BigNumberish,
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      nonce: BigNumberish,
    ],
    [bigint],
    "payable"
  >;

  bridgeMsg: TypedContractMethod<
    [nonce: BigNumberish, msg: string],
    [void],
    "nonpayable"
  >;

  bridgeTo: TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
    ],
    [bigint],
    "payable"
  >;

  bridgeToPermit: TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
    ],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "bridgeFrom",
  ): TypedContractMethod<
    [
      tokenDecimals: BigNumberish,
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      nonce: BigNumberish,
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bridgeMsg",
  ): TypedContractMethod<
    [nonce: BigNumberish, msg: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgeTo",
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bridgeToPermit",
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      maxSubmissionCost: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
    ],
    [bigint],
    "payable"
  >;

  filters: {};
}
