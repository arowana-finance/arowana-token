/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface IInitializableProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "changeAdmin"
      | "implementation"
      | "initializeProxy"
      | "upgradeToAndCall",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "initializeProxy",
    values: [AddressLike, AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeProxy",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike,
  ): Result;
}

export interface IInitializableProxy extends BaseContract {
  connect(runner?: ContractRunner | null): IInitializableProxy;
  waitForDeployment(): Promise<this>;

  interface: IInitializableProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "nonpayable">;

  changeAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  implementation: TypedContractMethod<[], [string], "nonpayable">;

  initializeProxy: TypedContractMethod<
    [newAdmin: AddressLike, newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "admin",
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "changeAdmin",
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "implementation",
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeProxy",
  ): TypedContractMethod<
    [newAdmin: AddressLike, newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall",
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  filters: {};
}
